name: Golden Test on PR Label

# on:
#   pull_request:
#     types: [labeled]

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]

jobs:
  golden_test:
    # Run this job only when the 'golden_test' label is added
    # if: github.event.label.name == 'golden_test'
    runs-on: macos-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout Head Branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: "3.32.0"
          cache: false

      - name: Update Dependencies
        run: |
          # Clear ALL cache and dependencies to force fresh download
          echo "=== Clearing all caches ==="
          rm -rf .dart_tool
          rm -rf pubspec.lock
          rm -rf ~/.pub-cache || true
          rm -rf $PUB_CACHE || true
          rm -rf $FLUTTER_ROOT/.pub-cache || true
          flutter clean

          # Clear Flutter's global cache too
          flutter doctor --android-licenses > /dev/null 2>&1 || true
          flutter config --clear-features || true

          # Verify pubspec.lock is deleted
          echo "=== Verifying clean state ==="
          ls -la pubspec.lock 2>/dev/null && echo "WARNING: pubspec.lock still exists" || echo "pubspec.lock successfully removed"

          # Force fresh pub get without any cache
          echo "=== Getting dependencies fresh ==="
          PUB_CACHE="" flutter pub get --no-precompile
          echo "=== Upgrading to latest versions ==="
          PUB_CACHE="" flutter pub upgrade --no-precompile

          # Verify alchemist version explicitly
          echo "=== Alchemist Version Check ==="
          flutter pub deps | grep alchemist || echo "Alchemist not found in deps"

          # Show pubspec.lock content for alchemist
          echo "=== Alchemist in pubspec.lock ==="
          grep -A3 -B1 "alchemist:" pubspec.lock || echo "Alchemist not in pubspec.lock"

      - name: Detect Changed View Files
        id: detect_changes
        run: |
          # Get the list of changed files between base and head
          git fetch origin ${{ github.base_ref }}
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)

          # Find view files (widgets, views, pages) that have been changed or added
          VIEW_FILES=$(echo "$CHANGED_FILES" | grep -E "lib/.*(widgets|views|pages)/.*\.dart$" | grep -v "\.g\.dart$" | grep -v "\.freezed\.dart$" || true)

          echo "Changed view files:"
          echo "$VIEW_FILES"

          # Create a JSON array of changed view files
          if [ -n "$VIEW_FILES" ]; then
            VIEW_FILES_JSON=$(echo "$VIEW_FILES" | jq -R -s -c 'split("\n") | map(select(. != ""))')
          else
            VIEW_FILES_JSON="[]"
          fi

          echo "view_files=$VIEW_FILES_JSON" >> $GITHUB_OUTPUT

      - name: Analyze Golden Test Status
        id: analyze_tests
        run: |
          VIEW_FILES='${{ steps.detect_changes.outputs.view_files }}'

          if [ "$VIEW_FILES" == "[]" ]; then
            echo "No view files changed"
            echo "scenarios={}" >> $GITHUB_OUTPUT
            exit 0
          fi

          SCENARIOS="{}"

          for file in $(echo "$VIEW_FILES" | jq -r '.[]'); do
            # Extract the file name without extension and path
            filename=$(basename "$file" .dart)
            relative_path=$(dirname "$file" | sed 's|lib/||')

            # Check if golden test exists in head branch
            test_file="test/${relative_path}/${filename}_golden_test.dart"
            head_has_test=false
            if [ -f "$test_file" ]; then
              head_has_test=true
            fi

            # Check if the view file existed in base branch
            git checkout origin/${{ github.base_ref }} -- "$file" 2>/dev/null
            base_has_file=$?

            # Check if golden test existed in base branch
            base_has_test=false
            if [ $base_has_file -eq 0 ] && [ -f "$test_file" ]; then
              base_has_test=true
            fi

            # Go back to head branch
            git checkout HEAD -- "$file" "$test_file" 2>/dev/null || true

            # Determine scenario
            if [ $base_has_file -ne 0 ]; then
              # New file
              scenario="new_view"
            elif [ "$base_has_test" = true ] && [ "$head_has_test" = true ]; then
              # Existing golden test
              scenario="existing_golden_test"
            elif [ "$base_has_test" = false ] && [ "$head_has_test" = false ]; then
              # No golden test, but view exists
              scenario="no_golden_test"
            else
              # Golden test was added/removed
              scenario="existing_golden_test"
            fi

            # Add to scenarios JSON
            SCENARIOS=$(echo "$SCENARIOS" | jq --arg file "$file" --arg scenario "$scenario" --arg test_file "$test_file" '. + {($file): {scenario: $scenario, test_file: $test_file}}')
          done

          # Output scenarios as compact JSON (single line)
          SCENARIOS_COMPACT=$(echo "$SCENARIOS" | jq -c .)
          echo "scenarios=$SCENARIOS_COMPACT" >> $GITHUB_OUTPUT
          echo "Detected scenarios:"
          echo "$SCENARIOS" | jq .

      - name: Generate Missing Golden Tests (Head Branch)
        run: |
          SCENARIOS='${{ steps.analyze_tests.outputs.scenarios }}'

          if [ "$SCENARIOS" == "{}" ]; then
            echo "No scenarios to process"
            exit 0
          fi

          # Function to generate golden test
          generate_golden_test() {
            local dart_file="$1"
            local test_file="$2"

            # Extract class name from dart file
            class_name=$(grep -E "class\s+\w+\s+extends\s+(StatelessWidget|StatefulWidget)" "$dart_file" | head -1 | sed -E 's/.*class\s+(\w+)\s+extends.*/\1/')

            if [ -z "$class_name" ]; then
              echo "Could not find widget class in $dart_file"
              return 1
            fi

            # Extract file name and relative path
            file_name=$(basename "$dart_file" .dart)
            relative_path=$(echo "$dart_file" | sed 's|lib/||')

            # Create test directory if it doesn't exist
            mkdir -p "$(dirname "$test_file")"

            # Generate golden test content
            {
              echo "import 'package:alchemist/alchemist.dart';"
              echo "import 'package:flutter/material.dart';"
              echo "import 'package:flutter_test/flutter_test.dart';"
              echo "import 'package:sample_flutter2025/$relative_path';"
              echo ""
              echo "import '../../support/alchemist/device.dart';"
              echo ""
              echo "void main() {"
              echo "  group('$class_name Golden Tests', () {"
              echo "    Widget buildApp({required Brightness brightness}) {"
              echo "      return MaterialApp("
              echo "        theme: ThemeData("
              echo "          useMaterial3: true,"
              echo "          colorScheme: ColorScheme.fromSeed("
              echo "            seedColor: Colors.deepPurple,"
              echo "            brightness: brightness,"
              echo "          ),"
              echo "        ),"
              echo "        debugShowCheckedModeBanner: false,"
              echo "        home: const $class_name(),"
              echo "      );"
              echo "    }"
              echo ""
              echo "    goldenTest("
              echo "      'renders correctly on various devices and themes',"
              echo "      fileName: '$file_name',"
              echo "      builder: () => GoldenTestGroup("
              echo "        columns: 2,"
              echo "        children: Device.all"
              echo "            .map("
              echo "              (device) => GoldenTestScenario("
              echo "                name: device.name,"
              echo "                constraints: BoxConstraints.tight(device.size),"
              echo "                child: Builder("
              echo "                  builder: (context) {"
              echo "                    return buildApp(brightness: device.brightness);"
              echo "                  },"
              echo "                ),"
              echo "              ),"
              echo "            )"
              echo "            .toList(),"
              echo "      ),"
              echo "    );"
              echo "  });"
              echo "}"
            } > "$test_file"

            echo "Generated golden test: $test_file"
          }

          # Create golden tests for files that need them
          for file in $(echo "$SCENARIOS" | jq -r 'keys[]'); do
            scenario=$(echo "$SCENARIOS" | jq -r --arg file "$file" '.[$file].scenario')
            test_file=$(echo "$SCENARIOS" | jq -r --arg file "$file" '.[$file].test_file')

            if [ "$scenario" = "no_golden_test" ] || [ "$scenario" = "new_view" ]; then
              echo "Generating golden test for $file"
              generate_golden_test "$file" "$test_file"
            fi
          done

      - name: Generate "After" Goldens (Head Branch)
        run: |
          SCENARIOS='${{ steps.analyze_tests.outputs.scenarios }}'
          if [ "$SCENARIOS" != "{}" ]; then
            flutter test --update-goldens
          else
            echo "No scenarios to process, skipping golden test generation"
          fi

      - name: Organize "After" Goldens
        run: |
          mkdir -p .goldens/after
          find test -type f -path "*/goldens/ci/*.png" | while read -r file; do
            target_dir=".goldens/after/$(dirname "$file")"
            mkdir -p "$target_dir"
            cp "$file" "$target_dir/"
          done

      - name: Checkout Base Branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.base_ref }}
          clean: false

      - name: Update Dependencies (Base Branch)
        run: |
          # Clear ALL cache and dependencies to force fresh download
          echo "=== Clearing all caches (Base Branch) ==="
          rm -rf .dart_tool
          rm -rf pubspec.lock
          rm -rf ~/.pub-cache || true
          rm -rf $PUB_CACHE || true
          rm -rf $FLUTTER_ROOT/.pub-cache || true
          flutter clean

          # Clear Flutter's global cache too
          flutter doctor --android-licenses > /dev/null 2>&1 || true
          flutter config --clear-features || true

          # Verify pubspec.lock is deleted
          echo "=== Verifying clean state (Base Branch) ==="
          ls -la pubspec.lock 2>/dev/null && echo "WARNING: pubspec.lock still exists" || echo "pubspec.lock successfully removed"

          # Force fresh pub get without any cache
          echo "=== Getting dependencies fresh (Base Branch) ==="
          PUB_CACHE="" flutter pub get --no-precompile
          echo "=== Upgrading to latest versions (Base Branch) ==="
          PUB_CACHE="" flutter pub upgrade --no-precompile

      - name: Generate Missing Golden Tests (Base Branch)
        run: |
          SCENARIOS='${{ steps.analyze_tests.outputs.scenarios }}'

          if [ "$SCENARIOS" == "{}" ]; then
            echo "No scenarios to process"
            exit 0
          fi

          # Function to generate golden test (same as head branch)
          generate_golden_test() {
            local dart_file="$1"
            local test_file="$2"

            # Extract class name from dart file
            class_name=$(grep -E "class\s+\w+\s+extends\s+(StatelessWidget|StatefulWidget)" "$dart_file" | head -1 | sed -E 's/.*class\s+(\w+)\s+extends.*/\1/')

            if [ -z "$class_name" ]; then
              echo "Could not find widget class in $dart_file"
              return 1
            fi

            # Extract file name and relative path
            file_name=$(basename "$dart_file" .dart)
            relative_path=$(echo "$dart_file" | sed 's|lib/||')

            # Create test directory if it doesn't exist
            mkdir -p "$(dirname "$test_file")"

            # Generate golden test content
            {
              echo "import 'package:alchemist/alchemist.dart';"
              echo "import 'package:flutter/material.dart';"
              echo "import 'package:flutter_test/flutter_test.dart';"
              echo "import 'package:sample_flutter2025/$relative_path';"
              echo ""
              echo "import '../../support/alchemist/device.dart';"
              echo ""
              echo "void main() {"
              echo "  group('$class_name Golden Tests', () {"
              echo "    Widget buildApp({required Brightness brightness}) {"
              echo "      return MaterialApp("
              echo "        theme: ThemeData("
              echo "          useMaterial3: true,"
              echo "          colorScheme: ColorScheme.fromSeed("
              echo "            seedColor: Colors.deepPurple,"
              echo "            brightness: brightness,"
              echo "          ),"
              echo "        ),"
              echo "        debugShowCheckedModeBanner: false,"
              echo "        home: const $class_name(),"
              echo "      );"
              echo "    }"
              echo ""
              echo "    goldenTest("
              echo "      'renders correctly on various devices and themes',"
              echo "      fileName: '$file_name',"
              echo "      builder: () => GoldenTestGroup("
              echo "        columns: 2,"
              echo "        children: Device.all"
              echo "            .map("
              echo "              (device) => GoldenTestScenario("
              echo "                name: device.name,"
              echo "                constraints: BoxConstraints.tight(device.size),"
              echo "                child: Builder("
              echo "                  builder: (context) {"
              echo "                    return buildApp(brightness: device.brightness);"
              echo "                  },"
              echo "                ),"
              echo "              ),"
              echo "            )"
              echo "            .toList(),"
              echo "      ),"
              echo "    );"
              echo "  });"
              echo "}"
            } > "$test_file"

            echo "Generated golden test: $test_file"
          }

          # Create golden tests for files that existed in base but didn't have tests
          for file in $(echo "$SCENARIOS" | jq -r 'keys[]'); do
            scenario=$(echo "$SCENARIOS" | jq -r --arg file "$file" '.[$file].scenario')
            test_file=$(echo "$SCENARIOS" | jq -r --arg file "$file" '.[$file].test_file')

            if [ "$scenario" = "no_golden_test" ] && [ -f "$file" ]; then
              echo "Generating golden test for base version of $file"
              generate_golden_test "$file" "$test_file"
            fi
          done

      - name: Generate "Before" Goldens (Base Branch)
        run: |
          SCENARIOS='${{ steps.analyze_tests.outputs.scenarios }}'

          # Only run tests for scenarios that should have "before" images
          has_before_scenarios=false
          for file in $(echo "$SCENARIOS" | jq -r 'keys[]'); do
            scenario=$(echo "$SCENARIOS" | jq -r --arg file "$file" '.[$file].scenario')
            if [ "$scenario" != "new_view" ]; then
              has_before_scenarios=true
              break
            fi
          done

          if [ "$has_before_scenarios" = true ]; then
            flutter test --update-goldens
          else
            echo "No before scenarios found, skipping base golden generation"
            mkdir -p test  # Ensure test directory exists for next step
          fi

      - name: Organize "Before" Goldens
        run: |
          mkdir -p .goldens/before
          find test -type f -path "*/goldens/ci/*.png" 2>/dev/null | while read -r file; do
            if [ -f "$file" ]; then
              target_dir=".goldens/before/$(dirname "$file")"
              mkdir -p "$target_dir"
              cp "$file" "$target_dir/"
            fi
          done || true

      - name: Restore Head Branch Files
        run: |
          # Clean up any untracked files that might interfere with checkout
          git clean -fd .goldens/ || true
          git checkout ${{ github.head_ref }}

      - name: Commit Generated Golden Tests and Images
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Add generated test files and golden images
          git add test/
          git add .goldens/

          # Check if there are any changes to commit
          if git diff --staged --quiet; then
            echo "No golden test changes to commit."
          else
            git commit -m "chore: [CI] Auto-generate golden tests and update golden images"
            git push origin ${{ github.head_ref }}
          fi

      - name: Generate Golden Test Report
        uses: actions/github-script@v6
        with:
          script: |
            const { execSync } = require('child_process');
            const fs = require('fs');

            const scenarios = JSON.parse('${{ steps.analyze_tests.outputs.scenarios }}');
            const repoUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}`;

            if (Object.keys(scenarios).length === 0) {
              console.log('No scenarios to report.');
              return;
            }

            let commentBody = '## 📸 Golden Test Report\n\n';

            for (const [filePath, info] of Object.entries(scenarios)) {
              const fileName = filePath.split('/').pop().replace('.dart', '');
              const scenario = info.scenario;

              commentBody += `### ${fileName} (${scenario})\n\n`;

              // Find golden images for this file
              let beforeImages = [];
              let afterImages = [];

              try {
                const beforeFiles = execSync('find .goldens/before -name "*.png" 2>/dev/null || true').toString().split('\n').filter(Boolean);
                const afterFiles = execSync('find .goldens/after -name "*.png" 2>/dev/null || true').toString().split('\n').filter(Boolean);

                beforeImages = beforeFiles.filter(file => file.includes(fileName));
                afterImages = afterFiles.filter(file => file.includes(fileName));
              } catch (error) {
                console.log('Error finding image files:', error.message);
              }

              if (scenario === 'new_view') {
                commentBody += '| New Widget | Status |\n|:----------:|:------:|\n';
                for (const afterImage of afterImages) {
                  const imagePath = afterImage.replace('.goldens/after/', '');
                  const afterUrl = `${repoUrl}/blob/${{ github.head_ref }}/.goldens/after/${imagePath}?raw=true`;
                  commentBody += `| ![New](${afterUrl}) | ✅ Created |\n`;
                }
              } else {
                commentBody += '| Before | After | Status |\n|:------:|:-----:|:------:|\n';

                const allImages = new Set([
                  ...beforeImages.map(img => img.replace('.goldens/before/', '')),
                  ...afterImages.map(img => img.replace('.goldens/after/', ''))
                ]);

                for (const imagePath of allImages) {
                  const beforeExists = beforeImages.some(img => img.includes(imagePath));
                  const afterExists = afterImages.some(img => img.includes(imagePath));

                  const beforeUrl = beforeExists ?
                    `${repoUrl}/blob/${{ github.head_ref }}/.goldens/before/${imagePath}?raw=true` : '';
                  const afterUrl = afterExists ?
                    `${repoUrl}/blob/${{ github.head_ref }}/.goldens/after/${imagePath}?raw=true` : '';

                  let status = '';
                  if (scenario === 'no_golden_test') {
                    status = '🆕 Auto-generated';
                  } else if (beforeExists && afterExists) {
                    status = '🔄 Updated';
                  } else if (!beforeExists && afterExists) {
                    status = '✅ Added';
                  } else if (beforeExists && !afterExists) {
                    status = '❌ Removed';
                  }

                  const beforeCell = beforeExists ? `![Before](${beforeUrl})` : 'N/A';
                  const afterCell = afterExists ? `![After](${afterUrl})` : 'N/A';

                  commentBody += `| ${beforeCell} | ${afterCell} | ${status} |\n`;
                }
              }

              commentBody += '\n';
            }

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

      - name: Clean up temporary goldens directory
        if: always()
        run: rm -rf .goldens
