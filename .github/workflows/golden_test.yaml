name: Golden Test PR Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - "lib/**/*.dart"
      - "test/**/*_golden_test.dart"
      - "test/**/goldens/**/*.png"

jobs:
  golden-test-check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: "3.32.0"
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Store current golden images (if any)
        run: |
          mkdir -p /tmp/golden_current
          find test -name "*.png" -path "*/goldens/ci/*" -exec cp {} /tmp/golden_current/ \; 2>/dev/null || true

      - name: Checkout base branch and get base golden images
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}
          git checkout origin/${{ github.event.pull_request.base.ref }}

          # Create base goldens directory
          mkdir -p /tmp/golden_base

          # Copy existing golden images from base branch
          find test -name "*.png" -path "*/goldens/ci/*" -exec cp {} /tmp/golden_base/ \; 2>/dev/null || true

      - name: Get dependencies (base)
        run: flutter pub get

      - name: Generate base golden images (if needed)
        run: |
          # Run golden tests on base branch to ensure all golden images exist
          flutter test --tags golden --update-goldens 2>/dev/null || true

          # Update base golden images
          find test -name "*.png" -path "*/goldens/ci/*" -exec cp {} /tmp/golden_base/ \; 2>/dev/null || true

      - name: Checkout PR branch
        run: |
          git checkout ${{ github.event.pull_request.head.sha }}

      - name: Get dependencies (PR)
        run: flutter pub get

      - name: Run golden tests and generate new images
        id: golden_test
        run: |
          # Clean up any existing failure images
          find test -name "*_masterImage.png" -delete 2>/dev/null || true
          find test -name "*_testImage.png" -delete 2>/dev/null || true

          # First try running tests normally
          if flutter test --tags golden --reporter=json > test_results.json 2>&1; then
            echo "golden_test_passed=true" >> $GITHUB_OUTPUT
            echo "✅ All golden tests passed"
          else
            echo "golden_test_passed=false" >> $GITHUB_OUTPUT
            echo "⚠️ Golden tests failed - generating new images"

            # Generate new golden images
            flutter test --tags golden --update-goldens
          fi

      - name: Store updated golden images
        run: |
          mkdir -p /tmp/golden_updated
          find test -name "*.png" -path "*/goldens/ci/*" -exec cp {} /tmp/golden_updated/ \; 2>/dev/null || true

      - name: Compare golden images and generate comment
        id: generate_comment
        run: |
          COMMENT_BODY="## 🎨 Golden Test Results\n\n"

          # Test execution status
          if [[ "${{ steps.golden_test.outputs.golden_test_passed }}" == "true" ]]; then
            COMMENT_BODY="${COMMENT_BODY}✅ **Golden Tests**: All tests passed\n\n"
          else
            COMMENT_BODY="${COMMENT_BODY}⚠️ **Golden Tests**: Some tests failed - image comparison below\n\n"
          fi

          HAS_CHANGES=false

          # Check for new and modified golden images
          for updated_file in /tmp/golden_updated/*.png; do
            if [[ -f "$updated_file" ]]; then
              filename=$(basename "$updated_file")
              base_file="/tmp/golden_base/$filename"
              widget_name=${filename%.png}

              if [[ ! -f "$base_file" ]]; then
                # New golden image
                HAS_CHANGES=true
                if [[ "$HAS_CHANGES" == "true" ]] && [[ ! "$COMMENT_BODY" =~ "### ✨ New Golden Images" ]]; then
                  COMMENT_BODY="${COMMENT_BODY}### ✨ New Golden Images\n\n"
                fi
                COMMENT_BODY="${COMMENT_BODY}#### 🆕 \`$widget_name\`\n\n"
                COMMENT_BODY="${COMMENT_BODY}![New Golden Image](https://github.com/${{ github.repository }}/raw/${{ github.event.pull_request.head.sha }}/test/weather/widgets/goldens/ci/$filename)\n\n"
              elif ! cmp -s "$base_file" "$updated_file"; then
                # Modified golden image
                HAS_CHANGES=true
                if [[ "$HAS_CHANGES" == "true" ]] && [[ ! "$COMMENT_BODY" =~ "### 📸 Golden Image Changes" ]]; then
                  COMMENT_BODY="${COMMENT_BODY}### 📸 Golden Image Changes (Before/After)\n\n"
                fi
                COMMENT_BODY="${COMMENT_BODY}#### 🔄 \`$widget_name\`\n\n"
                COMMENT_BODY="${COMMENT_BODY}| Before | After |\n"
                COMMENT_BODY="${COMMENT_BODY}|---------|--------|\n"
                COMMENT_BODY="${COMMENT_BODY}| ![Before](https://github.com/${{ github.repository }}/raw/${{ github.event.pull_request.base.sha }}/test/weather/widgets/goldens/ci/$filename) | ![After](https://github.com/${{ github.repository }}/raw/${{ github.event.pull_request.head.sha }}/test/weather/widgets/goldens/ci/$filename) |\n\n"
              fi
            fi
          done

          # Check for deleted golden images
          for base_file in /tmp/golden_base/*.png; do
            if [[ -f "$base_file" ]]; then
              filename=$(basename "$base_file")
              updated_file="/tmp/golden_updated/$filename"
              widget_name=${filename%.png}

              if [[ ! -f "$updated_file" ]]; then
                # Deleted golden image
                HAS_CHANGES=true
                if [[ "$HAS_CHANGES" == "true" ]] && [[ ! "$COMMENT_BODY" =~ "### 🗑️ Deleted Golden Images" ]]; then
                  COMMENT_BODY="${COMMENT_BODY}### 🗑️ Deleted Golden Images\n\n"
                fi
                COMMENT_BODY="${COMMENT_BODY}#### ❌ \`$widget_name\`\n\n"
                COMMENT_BODY="${COMMENT_BODY}![Deleted Golden Image](https://github.com/${{ github.repository }}/raw/${{ github.event.pull_request.base.sha }}/test/weather/widgets/goldens/ci/$filename)\n\n"
              fi
            fi
          done

          # If no changes detected
          if [[ "$HAS_CHANGES" == "false" ]]; then
            COMMENT_BODY="${COMMENT_BODY}✅ No golden image changes detected.\n"
          fi

          # Save comment body
          echo "$COMMENT_BODY" > /tmp/comment_body.md
          echo "has_changes=$HAS_CHANGES" >> $GITHUB_OUTPUT

      - name: Commit updated golden images (if needed)
        if: steps.golden_test.outputs.golden_test_passed == 'false'
        run: |
          # Check if there are changes to commit
          if ! git diff --quiet test/weather/widgets/goldens/ci/ 2>/dev/null; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add test/weather/widgets/goldens/ci/
            git commit -m "Update golden test images" || true
            git push origin HEAD:${{ github.event.pull_request.head.ref }} || true
          fi

      - name: Upload failure images as artifacts (if any)
        if: steps.golden_test.outputs.golden_test_passed == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: golden-test-failures
          path: |
            test/**/*_masterImage.png
            test/**/*_testImage.png
          retention-days: 7

      - name: Upload golden comparison
        if: steps.generate_comment.outputs.has_changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: golden-comparison
          path: |
            /tmp/golden_base/
            /tmp/golden_updated/
          retention-days: 7

      - name: Find existing comment
        id: find_comment
        uses: peter-evans/find-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: "🎨 Golden Test Results"

      - name: Create or update comment
        if: steps.generate_comment.outputs.has_changes == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find_comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body-path: /tmp/comment_body.md
          edit-mode: replace
